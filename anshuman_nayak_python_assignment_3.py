# -*- coding: utf-8 -*-
"""Anshuman Nayak - Python_Assignment_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpFOIoJH_2TLrrYfzKfNmD63rEuDOD-J
"""

# 1. check Maximum number of a list of numbers in Python
#2. Python Program for factorial of a number
#3. Python Program for simple interest
#4. Python Program for compound interest
#5. Python Program to check Armstrong Number
#6. Python Program for Program to find area of a circle
#7. Python program to print all Prime numbers in an Interval
#8. Python program to check whether a number is Prime or not
#9. Python Program for n-th Fibonacci number
#10. Python Program for How to check if a given number is Fibonacci number?
#11. Python Program for n\’th multiple of a number in Fibonacci Series
#12. Python Program for Sum of squares of first n natural numbers
#13. Python Program for cube sum of first n natural numbers.

# 1
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
maximum_number = max(numbers)
# Printing the result
print("The maximum number in the list is:", maximum_number)

#2
def factorial_iterative(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result

number = 5
print(f"Factorial of {number} (iterative):", factorial_iterative(number))

#3
def calculate_simple_interest(principal, rate, time):

    simple_interest = (principal * rate * time) / 100
    return simple_interest

principal = 1000  # Principal amount in dollar
rate = 5  # Annual interest rate in percentage
time = 3  # Time period in years

simple_interest = calculate_simple_interest(principal, rate, time)

print(f"Simple interest for P=${principal}, R={rate}%, and T={time} years is: ${simple_interest}")

#4
def calculate_compound_interest(principal, rate, times_compounded, years):
    # Calculate the compound interest
    amount = principal * (1 + rate / times_compounded) ** (times_compounded * years)
    return amount

principal = float(input("Enter the principal amount: "))
rate = float(input("Enter the annual interest rate (in %): ")) / 100
times_compounded = int(input("Enter the number of times interest is compounded per year: "))
years = int(input("Enter the number of years the money is invested for: "))

# Calculate the compound interest
amount = calculate_compound_interest(principal, rate, times_compounded, years)
compound_interest = amount - principal


print(f"The amount after {years} years is: ${amount:.2f}")
print(f"The compound interest is: ${compound_interest:.2f}")

#5
def is_armstrong_number(num):

    num_str = str(num)
    # Get the number of digits
    num_digits = len(num_str)
    # Calculate the sum of digits each raised to the power of the number of digits
    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)
    # Check if the sum of powers is equal to the original number
    return sum_of_powers == num

# Input value
number = int(input("Enter a number: "))

# Check if the number is an Armstrong number
if is_armstrong_number(number):
    print(f"{number} is an Armstrong number.")
else:
    print(f"{number} is not an Armstrong number.")

#6
import math

def calculate_area_of_circle(radius):

    area = math.pi * radius ** 2
    return area

radius = float(input("Enter the radius of the circle: "))

area = calculate_area_of_circle(radius)

print(f"The area of the circle with radius {radius} is: {area:.2f}")

#7
def is_prime(n):

    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def print_primes_in_interval(start, end):

    """Print all prime numbers in the given interval [start, end]."""

    for num in range(start, end + 1):
        if is_prime(num):
            print(num, end=' ')

start = int(input("Enter the start of the interval: "))
end = int(input("Enter the end of the interval: "))

# Print all prime numbers in the interval
print(f"Prime numbers between {start} and {end} are:")
print_primes_in_interval(start, end)

#8
def is_prime(num):

    if num <= 1:
        return False

    for i in range(1, num):
        if num % i == 0:
            return False
    return True

num = int(input("Enter a number: "))

if is_prime(num):
    print(num, "is a prime number")
else:
    print(num, "is not a prime number")

#9
def fib(n):

  a=3
  b=4

  print(a)
  print(b)
  for i in range(2,n):

    c=a+b
    a=b
    b=c
    print(c)

fib(5)

#10
import math

def is_perfect_square(x):
    s = int(math.sqrt(x))
    return s * s == x

def is_fibonacci_number(n):
    # Check if 5*n^2 + 4 or 5*n^2 - 4 is a perfect square
    return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)

# Example usage:
n = int(input("Enter a number: "))
if is_fibonacci_number(n):
    print(f"{n} is a Fibonacci number.")
else:
    print(f"{n} is not a Fibonacci number.")

#11
def fibonacci_sequence():
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a + b

def nth_multiple_in_fibonacci(n, x):
    count = 0
    for fib_num in fibonacci_sequence():
        if fib_num % x == 0:
            count += 1
            if count == n:
                return fib_num

# Example usage:
n = int(input("Enter the value of n: "))
x = int(input("Enter the value of x (the multiple): "))
result = nth_multiple_in_fibonacci(n, x)
print(f"The {n}th multiple of {x} in the Fibonacci series is {result}.")

#12
def sum_of_squares(n):
    return (n * (n + 1) * (2 * n + 1)) // 6

# Example usage:
n = int(input("Enter a natural number n: "))
result = sum_of_squares(n)
print(f"The sum of squares of the first {n} natural numbers is {result}.")

#13
def sum_of_cubes(n):
    sum_n = (n * (n + 1)) // 2
    return sum_n * sum_n

# Example usage:
n = int(input("Enter a natural number n: "))
result = sum_of_cubes(n)
print(f"The sum of cubes of the first {n} natural numbers is {result}.")

